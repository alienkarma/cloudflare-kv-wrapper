{"version":3,"sources":["../src/index.ts","../src/config.ts","../src/kv/index.ts","../src/util.ts","../src/kv/read.ts","../src/kv/write.ts","../src/kv/remove.ts","../src/kv/list.ts","../src/kv/metadata.ts","../src/kv/multi/index.ts","../src/kv/multi/write.ts","../src/kv/multi/remove.ts","../src/namespace/index.ts","../src/namespace/create.ts","../src/namespace/get.ts","../src/namespace/list.ts","../src/namespace/remove.ts","../src/namespace/rename.ts","../src/kv/types.ts","../src/kv/multi/types.ts","../src/namespace/types.ts"],"sourcesContent":["import { INIT_STATE } from \"./config\";\r\nimport { Variables } from \"./util\";\r\n\r\nexport * as kv from \"./kv\";\r\nexport * as kvm from \"./kv/multi\";\r\nexport * as ns from \"./namespace\";\r\n\r\nexport * as KVTypes from \"./kv/types\";\r\nexport * as KVMTypes from \"./kv/multi/types\";\r\nexport * as NSTypes from \"./namespace/types\";\r\n\r\nexport const init = ({ accountId, authToken, namespaceId }: Variables) => {\r\n  INIT_STATE.accountId = accountId;\r\n  INIT_STATE.authToken = authToken;\r\n  INIT_STATE.namespaceId = namespaceId || \"\";\r\n};\r\n","const BASE_ENDPOINT = \"https://api.cloudflare.com/client/v4\";\r\nconst KV_ENDPOINT = `${BASE_ENDPOINT}/accounts/{account_id}/storage/kv/namespaces`;\r\nconst NAMESPACE_ENDPOINT = `${KV_ENDPOINT}/{namespace_id}`;\r\nconst KV_PAIRS_ENDPOINT = `${NAMESPACE_ENDPOINT}/values/{key_name}`;\r\nconst KV_PAIRS_BULK_ENDPOINT = `${NAMESPACE_ENDPOINT}/bulk`;\r\n\r\nexport const ENDPOINTS = {\r\n  NAMESPACE: {\r\n    LIST: `${KV_ENDPOINT}`,\r\n    CREATE: `${KV_ENDPOINT}`,\r\n    REMOVE: `${NAMESPACE_ENDPOINT}`,\r\n    GET: `${NAMESPACE_ENDPOINT}`,\r\n    RENAME: `${NAMESPACE_ENDPOINT}`,\r\n  },\r\n  KV_PAIR: {\r\n    LIST: `${NAMESPACE_ENDPOINT}/keys`,\r\n    METADATA: `${NAMESPACE_ENDPOINT}/metadata/{key_name}`,\r\n    MULTI: {\r\n      REMOVE: `${KV_PAIRS_BULK_ENDPOINT}`,\r\n      WRITE: `${KV_PAIRS_BULK_ENDPOINT}`,\r\n    },\r\n    REMOVE: `${KV_PAIRS_ENDPOINT}`,\r\n    READ: `${KV_PAIRS_ENDPOINT}`,\r\n    WRITE: `${KV_PAIRS_ENDPOINT}`,\r\n  },\r\n};\r\n\r\nexport const INIT_STATE: {\r\n  accountId: string;\r\n  authToken: string;\r\n  namespaceId: string;\r\n} = {\r\n  accountId: \"\",\r\n  authToken: \"\",\r\n  namespaceId: \"\",\r\n};\r\n\r\nexport interface Message {\r\n  code: number;\r\n  message: string;\r\n}\r\n\r\nexport interface Response<T> {\r\n  status: number;\r\n  statusText: string;\r\n  data?: T;\r\n}\r\n","import read from \"./read\";\r\nimport write from \"./write\";\r\nimport remove from \"./remove\";\r\nimport list from \"./list\";\r\nimport metadata from \"./metadata\";\r\n\r\nexport { read, write, remove, list, metadata };\r\n","import { INIT_STATE } from \"./config\";\r\n\r\nexport interface Variables {\r\n  accountId: string;\r\n  authToken: string;\r\n  namespaceId?: string;\r\n}\r\n\r\nexport const loadVariables = ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n}: Variables): {\r\n  accountId: string;\r\n  authToken: string;\r\n  namespaceId: string;\r\n} => {\r\n  const state = {\r\n    accountId: \"\",\r\n    authToken: \"\",\r\n    namespaceId: \"\",\r\n  };\r\n\r\n  state.accountId = accountId || INIT_STATE.accountId;\r\n  state.authToken = authToken || INIT_STATE.authToken;\r\n  state.namespaceId = namespaceId || INIT_STATE.namespaceId;\r\n\r\n  return state;\r\n};\r\n","import { ENDPOINTS, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Read {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  keyName: string;\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  keyName,\r\n}: Read): Promise<Response<any>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.KV_PAIR.READ.replace(\"{account_id}\", vars.accountId)\r\n    .replace(\"{namespace_id}\", vars.namespaceId)\r\n    .replace(\"{key_name}\", keyName);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data = await response.text();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Write {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  keyName: string;\r\n  metadata: Record<string, string>;\r\n  value: string;\r\n}\r\n\r\nexport interface WriteResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {};\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  keyName,\r\n  metadata,\r\n  value,\r\n}: Write): Promise<Response<WriteResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.KV_PAIR.WRITE.replace(\"{account_id}\", vars.accountId)\r\n    .replace(\"{namespace_id}\", vars.namespaceId)\r\n    .replace(\"{key_name}\", keyName);\r\n\r\n  const body = new FormData();\r\n  body.append(\"metadata\", JSON.stringify(metadata));\r\n  body.append(\"value\", value);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n    },\r\n    body,\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: WriteResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Remove {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  keyName: string;\r\n}\r\n\r\nexport interface RemoveResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {};\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  keyName,\r\n}: Remove): Promise<Response<RemoveResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.KV_PAIR.REMOVE.replace(\"{account_id}\", vars.accountId)\r\n    .replace(\"{namespace_id}\", vars.namespaceId)\r\n    .replace(\"{key_name}\", keyName);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface List {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  cursor?: string;\r\n  limit?: number;\r\n  prefix?: string;\r\n}\r\n\r\nexport interface ListResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result_info: {\r\n    count: number;\r\n    cursor?: string;\r\n  };\r\n  result: {\r\n    name: string;\r\n    metadata: Record<string, string>;\r\n    expiration?: number;\r\n  }[];\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  cursor,\r\n  limit,\r\n  prefix,\r\n}: List): Promise<Response<ListResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const query: string[] = [];\r\n\r\n  if (cursor) query.push(`cursor=${cursor}`);\r\n  if (limit) query.push(`limit=${limit}`);\r\n  if (prefix) query.push(`prefix=${prefix}`);\r\n\r\n  const queryString = query.length === 0 ? \"\" : \"?\" + query.join(\"&\");\r\n\r\n  const url =\r\n    ENDPOINTS.KV_PAIR.LIST.replace(\"{account_id}\", vars.accountId).replace(\r\n      \"{namespace_id}\",\r\n      vars.namespaceId\r\n    ) + queryString;\r\n\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: ListResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Metadata {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  keyName: string;\r\n}\r\n\r\nexport interface MetadataResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: Record<string, string>;\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  keyName,\r\n}: Metadata): Promise<Response<MetadataResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.KV_PAIR.METADATA.replace(\"{account_id}\", vars.accountId)\r\n    .replace(\"{namespace_id}\", vars.namespaceId)\r\n    .replace(\"{key_name}\", keyName);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: MetadataResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import write from \"./write\";\r\nimport remove from \"./remove\";\r\n\r\nexport { write, remove };\r\n","import { ENDPOINTS, Message, Response } from \"../../config\";\r\nimport { loadVariables } from \"../../util\";\r\n\r\nexport interface WriteKVPair {\r\n  base64?: boolean;\r\n  expiration?: number;\r\n  expiration_ttl?: number;\r\n  key: string;\r\n  value: string;\r\n  metadata?: Record<string, string>;\r\n}\r\n\r\nexport interface Write {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  body: WriteKVPair[];\r\n}\r\n\r\nexport interface WriteResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {};\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  body,\r\n}: Write): Promise<Response<WriteResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.KV_PAIR.MULTI.WRITE.replace(\r\n    \"{account_id}\",\r\n    vars.accountId\r\n  ).replace(\"{namespace_id}\", vars.namespaceId);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: WriteResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../../config\";\r\nimport { loadVariables } from \"../../util\";\r\n\r\nexport interface Remove {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  body: string[];\r\n}\r\n\r\nexport interface RemoveResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {};\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  body,\r\n}: Remove): Promise<Response<RemoveResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.KV_PAIR.MULTI.REMOVE.replace(\r\n    \"{account_id}\",\r\n    vars.accountId\r\n  ).replace(\"{namespace_id}\", vars.namespaceId);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import create from \"./create\";\r\nimport get from \"./get\";\r\nimport list from \"./list\";\r\nimport remove from \"./remove\";\r\nimport rename from \"./rename\";\r\n\r\nexport { create, get, list, remove, rename };\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Create {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  title: string;\r\n}\r\n\r\nexport interface CreateResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {\r\n    id: string;\r\n    supports_url_encoding: boolean;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  title,\r\n}: Create): Promise<Response<CreateResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n  });\r\n\r\n  const url = ENDPOINTS.NAMESPACE.CREATE.replace(\r\n    \"{account_id}\",\r\n    vars.accountId\r\n  );\r\n\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ title }),\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: CreateResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Get {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n}\r\n\r\nexport interface GetResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {\r\n    id: string;\r\n    supports_url_encoding: boolean;\r\n    title: string;\r\n  };\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n}: Get): Promise<Response<GetResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.NAMESPACE.GET.replace(\r\n    \"{account_id}\",\r\n    vars.accountId\r\n  ).replace(\"{namespace_id}\", vars.namespaceId);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: GetResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface List {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  direction?: \"asc\" | \"desc\";\r\n  order?: \"id\" | \"title\";\r\n  page?: number;\r\n  perPage?: number;\r\n}\r\n\r\nexport interface ListResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result_info: {\r\n    count: number;\r\n    page: number;\r\n    per_page: number;\r\n    total_count: number;\r\n  };\r\n  result: {\r\n    id: string;\r\n    supports_url_encoding: boolean;\r\n    title: string;\r\n  }[];\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  direction,\r\n  order,\r\n  page,\r\n  perPage,\r\n}: List): Promise<Response<ListResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n  });\r\n\r\n  const query: string[] = [];\r\n\r\n  if (direction) query.push(`direction=${direction}`);\r\n  if (order) query.push(`order=${order}`);\r\n  if (page) query.push(`page=${page}`);\r\n  if (perPage) query.push(`per_page=${perPage}`);\r\n\r\n  const queryString = query.length === 0 ? \"\" : \"?\" + query;\r\n\r\n  const url =\r\n    ENDPOINTS.NAMESPACE.LIST.replace(\"{account_id}\", vars.accountId) +\r\n    queryString;\r\n\r\n  const response = await fetch(url, {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: ListResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Remove {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n}\r\n\r\nexport interface RemoveResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {};\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n}: Remove): Promise<Response<RemoveResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.NAMESPACE.REMOVE.replace(\r\n    \"{account_id}\",\r\n    vars.accountId\r\n  ).replace(\"{namespace_id}\", vars.namespaceId);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: RemoveResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import { ENDPOINTS, Message, Response } from \"../config\";\r\nimport { loadVariables } from \"../util\";\r\n\r\nexport interface Rename {\r\n  accountId?: string;\r\n  authToken?: string;\r\n  namespaceId?: string;\r\n  title: string;\r\n}\r\n\r\nexport interface RenameResponse {\r\n  errors: Message[];\r\n  messages: Message[];\r\n  success: boolean;\r\n  result: {};\r\n}\r\n\r\nexport default async ({\r\n  accountId,\r\n  authToken,\r\n  namespaceId,\r\n  title,\r\n}: Rename): Promise<Response<RenameResponse>> => {\r\n  const vars = loadVariables({\r\n    accountId,\r\n    authToken,\r\n    namespaceId,\r\n  });\r\n\r\n  const url = ENDPOINTS.NAMESPACE.RENAME.replace(\r\n    \"{account_id}\",\r\n    vars.accountId\r\n  ).replace(\"{namespace_id}\", vars.namespaceId);\r\n\r\n  const response = await fetch(url, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      Authorization: `Bearer ${vars.authToken}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ title }),\r\n  });\r\n\r\n  const status = response.status;\r\n  const statusText = response.statusText;\r\n  const data: RenameResponse = await response.json();\r\n\r\n  return { status, statusText, data };\r\n};\r\n","import type { Read } from \"./read\";\r\nimport type { Write, WriteResponse } from \"./write\";\r\nimport type {\r\n  Remove as Remove,\r\n  RemoveResponse as RemoveResponse,\r\n} from \"./remove\";\r\nimport type { List, ListResponse } from \"./list\";\r\nimport type { Metadata, MetadataResponse } from \"./metadata\";\r\n\r\nexport type {\r\n  Read,\r\n  Write,\r\n  WriteResponse,\r\n  Remove,\r\n  RemoveResponse,\r\n  List,\r\n  ListResponse,\r\n  Metadata,\r\n  MetadataResponse,\r\n};\r\n","import type { WriteKVPair, Write, WriteResponse } from \"./write\";\r\nimport type {\r\n  Remove as Remove,\r\n  RemoveResponse as RemoveResponse,\r\n} from \"./remove\";\r\n\r\nexport type { WriteKVPair, Write, WriteResponse, Remove, RemoveResponse };\r\n","import type { Create, CreateResponse } from \"./create\";\r\nimport type { Get, GetResponse } from \"./get\";\r\nimport type { List, ListResponse } from \"./list\";\r\nimport type { Remove, RemoveResponse } from \"./remove\";\r\nimport type { Rename, RenameResponse } from \"./rename\";\r\n\r\nexport type {\r\n  Create,\r\n  CreateResponse,\r\n  Get,\r\n  GetResponse,\r\n  List,\r\n  ListResponse,\r\n  Remove,\r\n  RemoveResponse,\r\n  Rename,\r\n  RenameResponse,\r\n};\r\n"],"mappings":"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","names":["types_exports","remove_default","write_default","write_default","remove_default","list_default","remove_default","list_default","remove_default","types_exports","types_exports"]}